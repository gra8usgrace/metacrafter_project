/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace TokenVesting {
  export type BeneficiaryStruct = {
    beneficiaryAddress: AddressLike;
    position: string;
    vestingDuration: BigNumberish;
    startTime: BigNumberish;
    tokenAmount: BigNumberish;
    claimedTokenAmount: BigNumberish;
  };

  export type BeneficiaryStructOutput = [
    beneficiaryAddress: string,
    position: string,
    vestingDuration: bigint,
    startTime: bigint,
    tokenAmount: bigint,
    claimedTokenAmount: bigint
  ] & {
    beneficiaryAddress: string;
    position: string;
    vestingDuration: bigint;
    startTime: bigint;
    tokenAmount: bigint;
    claimedTokenAmount: bigint;
  };
}

export interface TokenVestingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addBeneficiary"
      | "addOrganization"
      | "addToWhitelist"
      | "balances"
      | "beneficiaries"
      | "claimTokens"
      | "getBeneficiaryInfo"
      | "getClaimedTokens"
      | "organizations"
      | "totalSupply"
      | "whitelist"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ClaimTokens" | "StakeholderCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addBeneficiary",
    values: [AddressLike, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addOrganization",
    values: [string, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addToWhitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "beneficiaries",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBeneficiaryInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "organizations",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whitelist",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addOrganization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beneficiaries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBeneficiaryInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "organizations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;
}

export namespace ClaimTokensEvent {
  export type InputTuple = [
    beneficiary: AddressLike,
    beneficiaryTokenAmount: BigNumberish
  ];
  export type OutputTuple = [
    beneficiary: string,
    beneficiaryTokenAmount: bigint
  ];
  export interface OutputObject {
    beneficiary: string;
    beneficiaryTokenAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeholderCreatedEvent {
  export type InputTuple = [
    startTime: BigNumberish,
    vestingDuration: BigNumberish
  ];
  export type OutputTuple = [startTime: bigint, vestingDuration: bigint];
  export interface OutputObject {
    startTime: bigint;
    vestingDuration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TokenVesting extends BaseContract {
  connect(runner?: ContractRunner | null): TokenVesting;
  waitForDeployment(): Promise<this>;

  interface: TokenVestingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addBeneficiary: TypedContractMethod<
    [
      _beneficiaryAddress: AddressLike,
      _position: string,
      _vestingDuration: BigNumberish,
      _tokenAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  addOrganization: TypedContractMethod<
    [
      _name: string,
      _organizationAddress: AddressLike,
      _tokenAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  addToWhitelist: TypedContractMethod<
    [_address: AddressLike],
    [void],
    "nonpayable"
  >;

  balances: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  beneficiaries: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, bigint, bigint, bigint] & {
        beneficiaryAddress: string;
        position: string;
        vestingDuration: bigint;
        startTime: bigint;
        tokenAmount: bigint;
        claimedTokenAmount: bigint;
      }
    ],
    "view"
  >;

  claimTokens: TypedContractMethod<[], [void], "nonpayable">;

  getBeneficiaryInfo: TypedContractMethod<
    [_address: AddressLike],
    [TokenVesting.BeneficiaryStructOutput],
    "view"
  >;

  getClaimedTokens: TypedContractMethod<[], [bigint], "view">;

  organizations: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint] & {
        organizationAddress: string;
        name: string;
        tokenAmount: bigint;
      }
    ],
    "view"
  >;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  whitelist: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addBeneficiary"
  ): TypedContractMethod<
    [
      _beneficiaryAddress: AddressLike,
      _position: string,
      _vestingDuration: BigNumberish,
      _tokenAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addOrganization"
  ): TypedContractMethod<
    [
      _name: string,
      _organizationAddress: AddressLike,
      _tokenAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addToWhitelist"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "balances"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "beneficiaries"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, bigint, bigint, bigint] & {
        beneficiaryAddress: string;
        position: string;
        vestingDuration: bigint;
        startTime: bigint;
        tokenAmount: bigint;
        claimedTokenAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimTokens"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getBeneficiaryInfo"
  ): TypedContractMethod<
    [_address: AddressLike],
    [TokenVesting.BeneficiaryStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getClaimedTokens"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "organizations"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint] & {
        organizationAddress: string;
        name: string;
        tokenAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "whitelist"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getEvent(
    key: "ClaimTokens"
  ): TypedContractEvent<
    ClaimTokensEvent.InputTuple,
    ClaimTokensEvent.OutputTuple,
    ClaimTokensEvent.OutputObject
  >;
  getEvent(
    key: "StakeholderCreated"
  ): TypedContractEvent<
    StakeholderCreatedEvent.InputTuple,
    StakeholderCreatedEvent.OutputTuple,
    StakeholderCreatedEvent.OutputObject
  >;

  filters: {
    "ClaimTokens(address,uint256)": TypedContractEvent<
      ClaimTokensEvent.InputTuple,
      ClaimTokensEvent.OutputTuple,
      ClaimTokensEvent.OutputObject
    >;
    ClaimTokens: TypedContractEvent<
      ClaimTokensEvent.InputTuple,
      ClaimTokensEvent.OutputTuple,
      ClaimTokensEvent.OutputObject
    >;

    "StakeholderCreated(uint256,uint256)": TypedContractEvent<
      StakeholderCreatedEvent.InputTuple,
      StakeholderCreatedEvent.OutputTuple,
      StakeholderCreatedEvent.OutputObject
    >;
    StakeholderCreated: TypedContractEvent<
      StakeholderCreatedEvent.InputTuple,
      StakeholderCreatedEvent.OutputTuple,
      StakeholderCreatedEvent.OutputObject
    >;
  };
}
