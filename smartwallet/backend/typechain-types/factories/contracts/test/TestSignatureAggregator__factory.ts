/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  TestSignatureAggregator,
  TestSignatureAggregatorInterface,
} from "../../../contracts/test/TestSignatureAggregator";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "entryPoint",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "delay",
        type: "uint32",
      },
    ],
    name: "addStake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation[]",
        name: "userOps",
        type: "tuple[]",
      },
    ],
    name: "aggregateSignatures",
    outputs: [
      {
        internalType: "bytes",
        name: "aggregatedSignature",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation[]",
        name: "userOps",
        type: "tuple[]",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "validateSignatures",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "",
        type: "tuple",
      },
    ],
    name: "validateUserOpSignature",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506109ad806100206000396000f3fe60806040526004361061003f5760003560e01c8063275e2d7914610044578063451711591461008157806364c530cd1461009d578063e3563a4f146100da575b600080fd5b34801561005057600080fd5b5061006b60048036038101906100669190610375565b610103565b6040516100789190610452565b60405180910390f35b61009b60048036038101906100969190610520565b610181565b005b3480156100a957600080fd5b506100c460048036038101906100bf9190610585565b6101f1565b6040516100d19190610452565b60405180910390f35b3480156100e657600080fd5b5061010160048036038101906100fc9190610624565b61020a565b005b60606000805b8484905081101561015757848482818110610127576101266106a5565b5b905060200281019061013991906106d9565b6020013582610148919061073b565b91508080600101915050610109565b5080604051602001610169919061077e565b60405160208183030381529060405291505092915050565b8173ffffffffffffffffffffffffffffffffffffffff16630396cb6034836040518363ffffffff1660e01b81526004016101bb91906107a8565b6000604051808303818588803b1580156101d457600080fd5b505af11580156101e8573d6000803e3d6000fd5b50505050505050565b6060604051806020016040528060008152509050919050565b6000805b8585905081101561026257600086868381811061022e5761022d6106a5565b5b905060200281019061024091906106d9565b6020013590508083610252919061073b565b925050808060010191505061020e565b50602083839050146102a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a090610846565b60405180910390fd5b600083838101906102ba9190610892565b90508181146102fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f590610957565b60405180910390fd5b505050505050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261033557610334610310565b5b8235905067ffffffffffffffff81111561035257610351610315565b5b60208301915083602082028301111561036e5761036d61031a565b5b9250929050565b6000806020838503121561038c5761038b610306565b5b600083013567ffffffffffffffff8111156103aa576103a961030b565b5b6103b68582860161031f565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b60005b838110156103fc5780820151818401526020810190506103e1565b60008484015250505050565b6000601f19601f8301169050919050565b6000610424826103c2565b61042e81856103cd565b935061043e8185602086016103de565b61044781610408565b840191505092915050565b6000602082019050818103600083015261046c8184610419565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061049f82610474565b9050919050565b60006104b182610494565b9050919050565b6104c1816104a6565b81146104cc57600080fd5b50565b6000813590506104de816104b8565b92915050565b600063ffffffff82169050919050565b6104fd816104e4565b811461050857600080fd5b50565b60008135905061051a816104f4565b92915050565b6000806040838503121561053757610536610306565b5b6000610545858286016104cf565b92505060206105568582860161050b565b9150509250929050565b600080fd5b6000610160828403121561057c5761057b610560565b5b81905092915050565b60006020828403121561059b5761059a610306565b5b600082013567ffffffffffffffff8111156105b9576105b861030b565b5b6105c584828501610565565b91505092915050565b60008083601f8401126105e4576105e3610310565b5b8235905067ffffffffffffffff81111561060157610600610315565b5b60208301915083600182028301111561061d5761061c61031a565b5b9250929050565b6000806000806040858703121561063e5761063d610306565b5b600085013567ffffffffffffffff81111561065c5761065b61030b565b5b6106688782880161031f565b9450945050602085013567ffffffffffffffff81111561068b5761068a61030b565b5b610697878288016105ce565b925092505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600082356001610160038336030381126106f6576106f56106d4565b5b80830191505092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061074682610702565b915061075183610702565b92508282019050808211156107695761076861070c565b5b92915050565b61077881610702565b82525050565b6000602082019050610793600083018461076f565b92915050565b6107a2816104e4565b82525050565b60006020820190506107bd6000830184610799565b92915050565b600082825260208201905092915050565b7f546573745369676e617475726556616c696461746f723a20736967206d75737460008201527f2062652075696e74000000000000000000000000000000000000000000000000602082015250565b60006108306028836107c3565b915061083b826107d4565b604082019050919050565b6000602082019050818103600083015261085f81610823565b9050919050565b61086f81610702565b811461087a57600080fd5b50565b60008135905061088c81610866565b92915050565b6000602082840312156108a8576108a7610306565b5b60006108b68482850161087d565b91505092915050565b7f546573745369676e617475726556616c696461746f723a20616767726567617460008201527f6564207369676e6174757265206d69736d6174636820286e6f6e63652073756d60208201527f2900000000000000000000000000000000000000000000000000000000000000604082015250565b60006109416041836107c3565b915061094c826108bf565b606082019050919050565b6000602082019050818103600083015261097081610934565b905091905056fea2646970667358221220cff63ce13444d9bc50d492173be91442511126493dd29e46bb64476a038e711664736f6c63430008180033";

type TestSignatureAggregatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestSignatureAggregatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestSignatureAggregator__factory extends ContractFactory {
  constructor(...args: TestSignatureAggregatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TestSignatureAggregator & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): TestSignatureAggregator__factory {
    return super.connect(runner) as TestSignatureAggregator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestSignatureAggregatorInterface {
    return new Interface(_abi) as TestSignatureAggregatorInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TestSignatureAggregator {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as TestSignatureAggregator;
  }
}
